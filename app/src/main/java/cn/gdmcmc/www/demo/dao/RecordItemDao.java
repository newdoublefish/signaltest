package cn.gdmcmc.www.demo.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_ITEM".
*/
public class RecordItemDao extends AbstractDao<RecordItem, Long> {

    public static final String TABLENAME = "RECORD_ITEM";

    /**
     * Properties of entity RecordItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Value = new Property(2, float.class, "value", false, "VALUE");
        public final static Property RecordId = new Property(3, Long.class, "recordId", false, "RECORD_ID");
    }

    private Query<RecordItem> record_ItemsQuery;

    public RecordItemDao(DaoConfig config) {
        super(config);
    }
    
    public RecordItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"VALUE\" REAL NOT NULL ," + // 2: value
                "\"RECORD_ID\" INTEGER);"); // 3: recordId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
        stmt.bindDouble(3, entity.getValue());
 
        Long recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindLong(4, recordId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
        stmt.bindDouble(3, entity.getValue());
 
        Long recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindLong(4, recordId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecordItem readEntity(Cursor cursor, int offset) {
        RecordItem entity = new RecordItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.getFloat(offset + 2), // value
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // recordId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecordItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValue(cursor.getFloat(offset + 2));
        entity.setRecordId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecordItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecordItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecordItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "items" to-many relationship of Record. */
    public List<RecordItem> _queryRecord_Items(Long recordId) {
        synchronized (this) {
            if (record_ItemsQuery == null) {
                QueryBuilder<RecordItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RecordId.eq(null));
                record_ItemsQuery = queryBuilder.build();
            }
        }
        Query<RecordItem> query = record_ItemsQuery.forCurrentThread();
        query.setParameter(0, recordId);
        return query.list();
    }

}
